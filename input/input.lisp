
;; (defun input-system (camera) 
;;   (when (key-is-pressed :w)
;;     (incf (aref (camera-pos camera) 2) 1.0))
;;   (when (key-is-pressed :s)
;;     (incf (aref (camera-pos camera) 2) 1.0))
;;   (when (key-is-pressed :a)
;;     (incf (aref (camera-pos camera) 0) 1.0))
;;   (when (key-is-pressed :d)
;;     (incf (aref (camera-pos camera) 0) 1.0)))

(defun input-system (entities time)
  (loop for entity in entities do
    (let ((position (camera-pos (model-camera entity))))
      (when (key-is-pressed :w)
        (incf (aref position 2) (* 1.0 time)))
      (when (key-is-pressed :s)
        (incf (aref position 2) (* -1.0 time)))
      (when (key-is-pressed :a)
        (incf (aref position 0) (* -1.0 time)))
      (when (key-is-pressed :d)
        (incf (aref position 0) (* 1.0 time))))))
